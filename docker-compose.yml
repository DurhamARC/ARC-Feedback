services:
  postgres:
    image: postgres:17.4
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:  
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5



  searchapp:
    build: .
    environment:
      FLASK_APP: wsgi.py
      FLASK_DEBUG: 0
    env_file:
      - .env
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./SearchApp/migrations:/app/SearchApp/migrations
    command: >
      sh -c "
        until PGPASSWORD=$${DB_PASS} pg_isready -h postgres -U $${DB_USER} -d $${DB_NAME} >/dev/null 2>&1; do
          echo 'Waiting for database...';
          sleep 2;
        done;
        env
        flask db upgrade &&
        gunicorn --bind 0.0.0.0:5000 wsgi:app
      "
    networks:
      - backend



  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - backend
    volumes:
      - pgvolume:/var/lib/pgadmin

networks:
  backend:

volumes:
  postgres_data:
  pgvolume: